// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./token/ERC20.sol";

/**
 * @dev Implementação do token ACME
 */
contract ACMEToken is IbelieveERC20 {
    // Eventos específicos
    event TokensBurned(address indexed from, uint256 amount);
    event TokensMinted(address indexed to, uint256 amount);
    event SubwalletRegistered(address indexed wallet, string name);
    event SubwalletRemoved(address indexed wallet);
    event SubwalletUpdated(address indexed wallet, string newName);

    // Estrutura para subwallet
    struct Subwallet {
        string name;
        bool isRegistered;
        uint256 lastActivity;
        uint256 registrationDate;
    }

    // Mapeamento de subwallets
    mapping(address => Subwallet) public subwallets;
    
    // Lista de subwallets para iteração
    address[] public subwalletList;

    // Limite máximo de subwallets
    uint256 public constant MAX_SUBWALLETS = 100;

    uint256 private constant INITIAL_SUPPLY = 1000000 * 10**18; // 1 milhão de tokens

    /**
     * @dev Inicializa o token ACME
     */
    constructor(address initialOwner) IbelieveERC20("ACME Token", "ACME", initialOwner) {
        _mint(initialOwner, INITIAL_SUPPLY);
    }

    // Função para registrar uma subwallet
    function registerSubwallet(address wallet, string memory name) external onlyOwner {
        require(!subwallets[wallet].isRegistered, "Subwallet ja registrada");
        require(wallet != address(0), "Endereco invalido");
        require(bytes(name).length > 0, "Nome invalido");
        require(subwalletList.length < MAX_SUBWALLETS, "Limite de subwallets atingido");

        subwallets[wallet] = Subwallet({
            name: name,
            isRegistered: true,
            lastActivity: block.timestamp,
            registrationDate: block.timestamp
        });

        subwalletList.push(wallet);
        emit SubwalletRegistered(wallet, name);
    }

    // Função para remover uma subwallet
    function removeSubwallet(address wallet) external onlyOwner {
        require(subwallets[wallet].isRegistered, "Subwallet nao registrada");
        
        // Remove da lista
        for (uint i = 0; i < subwalletList.length; i++) {
            if (subwalletList[i] == wallet) {
                subwalletList[i] = subwalletList[subwalletList.length - 1];
                subwalletList.pop();
                break;
            }
        }

        delete subwallets[wallet];
        emit SubwalletRemoved(wallet);
    }

    // Função para atualizar nome da subwallet
    function updateSubwalletName(address wallet, string memory newName) external onlyOwner {
        require(subwallets[wallet].isRegistered, "Subwallet nao registrada");
        require(bytes(newName).length > 0, "Nome invalido");

        subwallets[wallet].name = newName;
        emit SubwalletUpdated(wallet, newName);
    }

    // Função para verificar se é uma subwallet
    function isSubwallet(address wallet) public view returns (bool) {
        return subwallets[wallet].isRegistered;
    }

    // Sobrescrever função de transferência para atualizar última atividade
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        if (isSubwallet(msg.sender)) {
            subwallets[msg.sender].lastActivity = block.timestamp;
        }
        return super.transfer(to, amount);
    }

    // Função para queimar tokens
    function burn(uint256 amount) public virtual {
        require(isSubwallet(msg.sender) || owner() == msg.sender, "Apenas subwallets ou owner");
        _burn(msg.sender, amount);
        emit TokensBurned(msg.sender, amount);
    }

    // Função para mintar novos tokens (apenas owner)
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
        emit TokensMinted(to, amount);
    }

    /**
     * @dev Permite que o proprietário pause todas as transferências
     */
    function pause() public onlyOwner {
        _pause();
    }

    /**
     * @dev Permite que o proprietário despause todas as transferências
     */
    function unpause() public onlyOwner {
        _unpause();
    }

    /**
     * @dev Hook que é chamado antes de qualquer transferência de tokens
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override whenNotPaused {
        super._beforeTokenTransfer(from, to, amount);
    }

    // Função para listar todas as subwallets
    function getSubwallets() external view returns (address[] memory) {
        return subwalletList;
    }

    // Função para obter detalhes da subwallet
    function getSubwalletDetails(address wallet) external view returns (
        string memory name,
        bool isRegistered,
        uint256 lastActivity,
        uint256 balance
    ) {
        Subwallet memory sw = subwallets[wallet];
        return (
            sw.name,
            sw.isRegistered,
            sw.lastActivity,
            balanceOf(wallet)
        );
    }
} 